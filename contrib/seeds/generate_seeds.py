#!/usr/bin/python3.9

import re
import sys
import ipaddress
import datetime
from collections import defaultdict

TEMPLATE = """
/*!
 * Please don't update this file manually
 * Auto generated by contrib/seeds/generate_seeds.py
 *
 * Last Modified: {last_modified}
*/

use super::PeerAddress;
use std::net::{SocketAddr, IpAddr, Ipv4Addr, Ipv6Addr};

pub fn seed_bootstrap_nodes() -> Vec<PeerAddress> {
    vec![
        // --- BEGIN BOOTSTRAP NODES ---
{seed_nodes}
        // --- END BOOTSTRAP NODES ---
    ]
}
"""

HOST_TEMPLATES = {
    "ipv4": "PeerAddress(SocketAddr::new(IpAddr::V4(Ipv4Addr::new({host_hex})), {port_hex})),",
    "ipv6": "PeerAddress(SocketAddr::new(IpAddr::V6(Ipv6Addr::new({host_hex})), {port_hex})),"
}

ipV4 = re.compile(r"((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}")
ipV6 = re.compile(r"(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))")
onionV2 = re.compile(r"[a-z2-7]{16}.onion")
onionV3 = re.compile(r"[a-z2-7]{56}.onion")


def hexify_ip(ip, type="ipv4"):
    ip_address = ipaddress.ip_address(ip)
    if type == "ipv6":
        return ", ".join([f"0x{p}" for p in format(ip_address, "_X").split("_")])
    elif type == "ipv4":
        return ", ".join([f"0x{p}" for p in re.findall("..", format(ip_address, "x"))])


def get_formatted_hosts(lines):
    formatted = defaultdict(list)
    for r_line in lines:
        line = r_line.strip()
        if line:
            port = line.split(":")[-1]
            ip = line[:-(len(port)+1)]

            # replace brackets for ipv6s
            ip = ip.replace("[", "").replace("]", "")
            if ipV4.match(ip):
                formatted["ipv4"].append((ip, port))
            elif ipV6.match(ip):
                formatted["ipv6"].append((ip, port))
            elif onionV2.match(ip):
                formatted["onionv2"].append((ip, port))
            elif onionV3.match(ip):
                formatted["onionv3"].append((ip, port))

    return formatted


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Please provide the path to the file containing the seed hosts")
        exit(1)

    raw_seeds_path = sys.argv[1]
    with open(raw_seeds_path, "r") as r_handler:
        lines = r_handler.readlines()

    formatted_hosts = get_formatted_hosts(lines)

    supported_types = ["ipv4", "ipv6"]

    hosts = []
    space_padding = " " * 8
    for type in supported_types:
        hosts.append(f"{space_padding}// {type} addresses")
        hosts.append("")
        for host in formatted_hosts[type]:
            hosts.append(
                space_padding + HOST_TEMPLATES[type].format(host_hex=hexify_ip(host[0], type=type), port_hex=hex(int(host[1])))
            )
        hosts.append("")


    final = TEMPLATE.replace("{last_modified}", str(datetime.datetime.now())).replace("{seed_nodes}", "\n".join(hosts))

    destination = "../../src/node/seeds.rs"

    with open(destination, "w") as w_handler:
        w_handler.write(final)
